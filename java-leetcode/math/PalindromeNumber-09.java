// 给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。
//
//回文数
//是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
//
//例如，121 是回文，而 123 不是。
//
//
//示例 1：
//
//输入：x = 121
//输出：true
//示例 2：
//
//输入：x = -121
//输出：false
//解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
//示例 3：
//
//输入：x = 10
//输出：false
//解释：从右向左读, 为 01 。因此它不是一个回文数。
//
//
//提示：
//
//-231 <= x <= 231 - 1
//
//
//进阶：你能不将整数转为字符串来解决这个问题吗？

class Solution {
    public boolean isPalindrome(int x) {
        // 所有负数和能被 10 整除的数字都不是回文数
        // e.g. 10, 100, 2560 以 0 结尾的数字都可以被 10 整除，结尾为 0 除了 0 以外都不是回文数
        if (x < 0 || (x % 10 == 0 && x != 0)) return false;

        // 从后向前取数字，再和原来的数字进行对比
        // 迭代停止条件：x 比翻转后的数字小的时候停止，那么 x > target 的时候就一直迭代
        int target = 0;
        while(x > target) {
            target = target * 10 + x % 10;
            x /= 10;
        }

        // x 长度如果是奇数那么迭代后 target 可能比 x 长一位，长出来的一位属于这个数字的中位数
        // 所以不影响结果，只要 / 10 就好了
        // 如果 x 长度是偶数的话那么迭代完成后位数相同，所以直接进行比较 x 和 target
        return x == target || x == target / 10;
    }
}